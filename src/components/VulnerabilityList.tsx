
import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import VulnerabilityCard from './VulnerabilityCard';
import { AlertCircle, AlertTriangle, Info, ShieldCheck, ListFilter } from 'lucide-react';

interface VulnerabilityListProps {
  results: VulnerabilityResult[];
}

const VulnerabilityList: React.FC<VulnerabilityListProps> = ({ results }) => {
  const criticalVulns = results.filter(v => v.severity === 'critical');
  const highVulns = results.filter(v => v.severity === 'high');
  const mediumVulns = results.filter(v => v.severity === 'medium');
  const lowVulns = results.filter(v => v.severity === 'low');

  return (
    <div className="w-full max-w-4xl mx-auto">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Scan Results</h2>
        <div className="flex items-center space-x-2 text-sm">
          <span className="flex items-center">
            <div className="w-3 h-3 rounded-full bg-security-critical mr-1"></div>
            {criticalVulns.length} Critical
          </span>
          <span className="flex items-center">
            <div className="w-3 h-3 rounded-full bg-security-high mr-1"></div>
            {highVulns.length} High
          </span>
          <span className="flex items-center">
            <div className="w-3 h-3 rounded-full bg-security-medium mr-1"></div>
            {mediumVulns.length} Medium
          </span>
          <span className="flex items-center">
            <div className="w-3 h-3 rounded-full bg-security-low mr-1"></div>
            {lowVulns.length} Low
          </span>
        </div>
      </div>

      <Tabs defaultValue="all" className="w-full">
        <TabsList className="grid grid-cols-5 mb-4">
          <TabsTrigger value="all" className="flex items-center">
            <ListFilter className="h-4 w-4 mr-1" />
            All ({results.length})
          </TabsTrigger>
          <TabsTrigger value="critical" className="flex items-center text-security-critical">
            <AlertCircle className="h-4 w-4 mr-1" />
            Critical ({criticalVulns.length})
          </TabsTrigger>
          <TabsTrigger value="high" className="flex items-center text-security-high">
            <AlertTriangle className="h-4 w-4 mr-1" />
            High ({highVulns.length})
          </TabsTrigger>
          <TabsTrigger value="medium" className="flex items-center text-security-medium">
            <Info className="h-4 w-4 mr-1" />
            Medium ({mediumVulns.length})
          </TabsTrigger>
          <TabsTrigger value="low" className="flex items-center text-security-low">
            <ShieldCheck className="h-4 w-4 mr-1" />
            Low ({lowVulns.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="space-y-4">
          {results.map(vuln => (
            <VulnerabilityCard key={vuln.id} vulnerability={vuln} />
          ))}
        </TabsContent>

        <TabsContent value="critical" className="space-y-4">
          {criticalVulns.length > 0 ? (
            criticalVulns.map(vuln => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} />
            ))
          ) : (
            <p className="text-center py-4 text-muted-foreground">No critical vulnerabilities found.</p>
          )}
        </TabsContent>

        <TabsContent value="high" className="space-y-4">
          {highVulns.length > 0 ? (
            highVulns.map(vuln => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} />
            ))
          ) : (
            <p className="text-center py-4 text-muted-foreground">No high vulnerabilities found.</p>
          )}
        </TabsContent>

        <TabsContent value="medium" className="space-y-4">
          {mediumVulns.length > 0 ? (
            mediumVulns.map(vuln => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} />
            ))
          ) : (
            <p className="text-center py-4 text-muted-foreground">No medium vulnerabilities found.</p>
          )}
        </TabsContent>

        <TabsContent value="low" className="space-y-4">
          {lowVulns.length > 0 ? (
            lowVulns.map(vuln => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} />
            ))
          ) : (
            <p className="text-center py-4 text-muted-foreground">No low vulnerabilities found.</p>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default VulnerabilityList;
